/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "62b8c7a1-4544-8b44-b120-d1cf26f4834b";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_instance_id;
	} align(8);
};

env {
	hostname = "Sansfil-Securise-Etudiants-Lassonde-241-79.polymtl.ca";
	domain = "kernel";
	sysname = "Linux";
	kernel_release = "4.12.8-300.fc26.x86_64";
	kernel_version = "#1 SMP Thu Aug 17 15:30:20 UTC 2017";
	tracer_name = "lttng-modules";
	tracer_major = 2;
	tracer_minor = 10;
	tracer_patchlevel = 0;
};

clock {
	name = monotonic;
	description = "Monotonic Clock";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 1504099144087371458;
	absolute = true;
};

stream {
	id = 0;
	event.header := struct {
		enum : integer { size = 5; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } { "compact" = 0 ... 30, "extended" = 31 } id;
		variant < id> {
			struct {
				integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp;
			} align(1) compact;
			struct {
				integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
				integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp;
			} align(8) extended;
		} v;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_seq_num;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } cpu_id;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = native; } lost_begin;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = native; } lost_end;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = native; } deleted_count;
	} align(8);
};

event {
	name = "sched_switch";
	id = 0;
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 8; signed = false; encoding = UTF8; base = decimal; byte_order = le; } prev_comm[16];
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } prev_tid;
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } prev_prio;
		integer { size = 64; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } prev_state;
		integer { size = 8; align = 8; signed = false; encoding = UTF8; base = decimal; byte_order = le; } next_comm[16];
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } next_tid;
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } next_prio;
	} align(8);
};

